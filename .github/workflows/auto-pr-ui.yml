name: Auto PR UI

permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  workflow_dispatch:
    inputs:
      intent:
        description: "Intent name, e.g. financial_overview"
        required: true
      route:
        description: "Route path, e.g. /financial-overview"
        required: true
      title:
        description: "PR title (optional)"
        required: false
  issues:
    types: [labeled]

jobs:
  open-pr:
    # Run when manually dispatched OR when an issue gets label 'build'
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'issues' && github.event.action == 'labeled' && github.event.label.name == 'build') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Write generator script
        run: |
          mkdir -p ops
          cat > ops/make_tab_page.js <<'JS'
          const fs=require('fs');const path=require('path');const REPO=process.cwd();
          const evPath=process.env.GITHUB_EVENT_PATH; const ev=evPath?require(evPath):{};
          const fromIssue = ev.issue || {};
          const body = (fromIssue.body||'');
          const title = process.env.INPUT_TITLE || fromIssue.title || 'Auto UI Page';
          // Prefer workflow_dispatch inputs, else parse issue body
          const intent = (process.env.INPUT_INTENT || (body.match(/intent:\s*([a-z0-9_]+)/i)||[])[1] || '').trim();
          const route  = (process.env.INPUT_ROUTE  || (body.match(/Route:\s*(\/[A-Za-z0-9\-_\/]+)/i)||[])[1] || '').trim() || `/${intent||'new-tab'}`;
          if(!intent){ console.error('No intent found. Provide via workflow inputs or issue body.'); process.exit(1); }
          const slug = route.replace(/^\//,'');
          function ensure(p){ if(!fs.existsSync(p)) fs.mkdirSync(p,{recursive:true}); }
          const apiPath=path.join(REPO,'lib','api.ts'); ensure(path.dirname(apiPath));
          if(!fs.existsSync(apiPath)){
            fs.writeFileSync(apiPath,`export const BACKEND_URL=process.env.NEXT_PUBLIC_BACKEND_URL||"https://lightsignal-backend.onrender.com";
            export async function callIntent(intent,companyId="demo",input={}){const r=await fetch(\`\${BACKEND_URL}/api/intent\`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({intent,company_id:companyId,input}),cache:"no-store"});if(!r.ok){throw new Error("intent failed")}return r.json();}
            `);
          }
          const appDir=path.join(REPO,'app'); const useApp=fs.existsSync(appDir);
          const compName = slug.split(/[^\w]+/).filter(Boolean).map(s=>s[0].toUpperCase()+s.slice(1)).join('') || 'Tab';
          const pageApp=`"use client";
          import React from "react"; import { callIntent } from "@/lib/api";
          export default function ${compName}Page(){
            const [loading,setL]=React.useState(false); const [error,setE]=React.useState<string|null>(null); const [data,setD]=React.useState<any>(null);
            async function refresh(){ try{ setL(true); setE(null); const res=await callIntent("${intent}","demo",{}); setD(res); } catch(e:any){ setE(e.message||"Error"); } finally{ setL(false); } }
            React.useEffect(()=>{ refresh(); },[]);
            return (<div style={{maxWidth:980,margin:"40px auto",padding:16}}>
              <h1>${compName}</h1><p style={{color:"#666"}}>Route: ${route} • Intent: ${intent}</p>
              <button onClick={refresh} disabled={loading}>{loading?"Loading...":"Refresh"}</button>
              {error && <pre style={{color:"crimson"}}>{error}</pre>}
              {data  && <pre style={{background:"#f6f8fa",padding:12,marginTop:12,overflow:"auto"}}>{JSON.stringify(data,null,2)}</pre>}
            </div>);
          }`;
          const pagePages=`import React from "react"; import { callIntent } from "../lib/api";
          export default function ${compName}Page(){
            const [loading,setL]=React.useState(false); const [error,setE]=React.useState<string|null>(null); const [data,setD]=React.useState<any>(null);
            async function refresh(){ try{ setL(true); setE(null); const res=await callIntent("${intent}","demo",{}); setD(res); } catch(e:any){ setE(e.message||"Error"); } finally{ setL(false); } }
            React.useEffect(()=>{ refresh(); },[]);
            return (<div style={{maxWidth:980,margin:"40px auto",padding:16}}>
              <h1>${compName}</h1><p style={{color:"#666"}}>Route: ${route} • Intent: ${intent}</p>
              <button onClick={refresh} disabled={loading}>{loading?"Loading...":"Refresh"}</button>
              {error && <pre style={{color:"crimson"}}>{error}</pre>}
              {data  && <pre style={{background:"#f6f8fa",padding:12,marginTop:12,overflow:"auto"}}>{JSON.stringify(data,null,2)}</pre>}
            </div>);
          }`;
          if(useApp){ const t=path.join(REPO,'app',slug,'page.tsx'); ensure(path.dirname(t)); fs.writeFileSync(t,pageApp); console.log('Generated (App Router):',t); }
          else { ensure(path.join(REPO,'pages')); const t=path.join(REPO,'pages',`${slug}.tsx`); fs.writeFileSync(t,pagePages); console.log('Generated (Pages Router):',t); }
          JS

      - name: Generate page
        env:
          INPUT_INTENT: ${{ github.event.inputs.intent }}
          INPUT_ROUTE:  ${{ github.event.inputs.route }}
          INPUT_TITLE:  ${{ github.event.inputs.title }}
        run: node ops/make_tab_page.js

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "feat(ui): scaffold for ${{ github.event.inputs.intent || 'issue' }}"
          branch: auto/ui-${{ github.run_id }}
          title: "${{ github.event.inputs.title || format('Auto UI: {0}', github.event.inputs.intent) }}"
          body: "Scaffolded ${{
            github.event.inputs.intent || 'from issue'
          }} at route ${{ github.event.inputs.route || 'from issue' }}."
          add-paths: |
            app/**
            pages/**
            lib/**
            ops/**
          labels: |
            build
