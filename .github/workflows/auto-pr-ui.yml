name: Auto PR: UI Scaffolder

on:
  issues:
    types: [opened, edited, labeled, reopened]
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Issue number to scaffold from"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  build-ui:
    # Run when manually dispatched OR when the issue has the `auto-pr-ui` label
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'auto-pr-ui')) }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Resolve issue number
        id: meta
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "issue=${{ inputs.issue_number }}" >> "$GITHUB_OUTPUT"
          else
            echo "issue=${{ github.event.issue.number }}" >> "$GITHUB_OUTPUT"
          fi
          echo "stamp=$(date +%s)" >> "$GITHUB_OUTPUT"

      - name: Read & parse issue
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = parseInt(process.env.ISSUE, 10);
            const { data } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number
            });
            const body = data.body || '';

            const get = (re, d='') => {
              const m = body.match(re);
              return m ? m[1].trim() : d;
            };

            let route = get(/\[ROUTE\]:\s*(.+)/i, '/').trim();
            if (!route.startsWith('/')) route = '/' + route;
            route = route.replace(/\/+$/, '');

            const outputs = {
              issue: issue_number.toString(),
              intent: get(/\[INTENT\]:\s*(.+)/i, 'page'),
              route,
              title: get(/\[PAGE_TITLE\]:\s*(.+)/i, 'New Page'),
              desc:  get(/\[DESCRIPTION\]:\s*([\s\S]*?)(?:\n\[[A-Z_]+\]:|```|$)/i, '').trim(),
              tsx:   ((body.match(/```tsx([\s\S]*?)```/i) || [,''])[1]).trim()
            };

            for (const [k,v] of Object.entries(outputs)) core.setOutput(k, v);
          env:
            ISSUE: ${{ steps.meta.outputs.issue }}

      - name: Scaffold files
        id: scaffold
        shell: bash
        run: |
          set -euo pipefail
          ROUTE="${{ steps.parse.outputs.route }}"
          TITLE="${{ steps.parse.outputs.title }}"
          DESC="${{ steps.parse.outputs.desc }}"
          TSX_CONTENT="${{ steps.parse.outputs.tsx }}"

          if [ "$ROUTE" = "/" ]; then
            DEST_DIR="app"
            DEST_FILE="app/page.tsx"
          else
            CLEAN="${ROUTE#/}"
            DEST_DIR="app/${CLEAN}"
            DEST_FILE="${DEST_DIR}/page.tsx"
          fi

          mkdir -p "$DEST_DIR"

          if [ -n "$TSX_CONTENT" ]; then
            printf "%s\n" "$TSX_CONTENT" > "$DEST_FILE"
          else
            cat > "$DEST_FILE" <<'TSX'
/* auto-generated stub */
import Link from "next/link";

export default function Page() {
  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold">__TITLE__</h1>
        <Link href="/" className="text-sm underline">Back to Dashboard</Link>
      </div>
      <p className="text-sm text-gray-600">__DESC__</p>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="rounded-xl border p-4">Replace me with real UI.</div>
        <div className="rounded-xl border p-4">Hook up real API calls.</div>
      </div>
    </div>
  );
}
TSX
            sed -i "s#__TITLE__#${TITLE//\//\\/}#g" "$DEST_FILE"
            sed -i "s#__DESC__#${DESC//\//\\/}#g" "$DEST_FILE"
          fi

          echo "dest=$DEST_FILE" >> "$GITHUB_OUTPUT"

      - name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          branch: auto/ui-${{ steps.meta.outputs.stamp }}
          commit-message: feat(ui): scaffold ${{ steps.parse.outputs.title }} from issue #${{ steps.parse.outputs.issue }}
          title: feat(ui): scaffold ${{ steps.parse.outputs.title }} from issue #${{ steps.parse.outputs.issue }}
          body: |
            Generated from issue #${{ steps.parse.outputs.issue }}.
            - Intent: `${{ steps.parse.outputs.intent }}`
            - Route: `${{ steps.parse.outputs.route }}`
            - File: `${{ steps.scaffold.outputs.dest }}`

            Edit the stub and merge. Vercel will attach a preview to this PR.
          labels: auto-pr, ui
          add-paths: |
            app/**
